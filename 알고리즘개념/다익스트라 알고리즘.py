'''
[다익스트라 알고리즘]
1. 개념 및 특징
  : 시작정점에서 거리가 최소인 정점부터 선택하여 최단경로를 구하는 방식
  : 탐욕기법을 사용한 알고리즘으로 최소신장트리를 구하는 프림알고리즘과 유사
  : s -> e = s -> x + x -> e

2. 풀이
 [1. 다익스트라 알고리즘]
  * 시작점에서의 최단 경로를 찾은 정점들의 집합S를 관리
    1-1. 최초 S = {r}, d{r} = 0, d[v] = inf
    1-2. 최단 경로를 찾은 정점을 하나씩 집합S에 추가
    1-3. 집합S에 포함되지 않은 정점들 중 출발점에 가장 가까운 정점 선택

  [2. 탐욕적 방법으로 정점 선택]
    1. 집합S에 포함되지 않은 v를 선택해서 집합S에 포함시키려 함
    2. 집합S에서 v로 가는 경로의 마지막은 정점 u에서 나오는 간선
    3. 출발점 r에서 v까지의 최단경로 d[u] + w(u, v)
'''

# 동작 과정
def Dijkstra(G, r):    # G: 그래프, r: 시작 정점
    D = [INF] * N    # 출발점에서 각 정점까지 최단 경로 가중치 합을 저장
    P = [None] * N    # 최단 경로 트리 저장
    visited = [False] * N    # 그래프의 각 정점에 대해 방문여부 저장
    D[r] = 0    # 출발점 r에 대한 가중치 값을 0으로 초기화

    for _ in range(N):    # 정점의 갯수만큼 반복
        min_idx = -1
        min = INF

        for i in range(N):
            if not visited[i] and D[i] < min:    # 방문 안한 정점 중 최소 가중치 정점 찾기
                min = D[i]
                min_idx = i    # 최소 가중치 정점을 찾아 방문처리하고, 값 갱신
        visited[min_idx] = True

        for v, val in G[min_idx]:    # 선택 정점에 인접한 정점에 대해 반복
            # 방문 안한 정점 중 선택한 정점의 가중치 값에 간선의 가중치를 더한 값보다 v의 가중치 값이 더 크다면
            # 이는 선택한 정점을 거쳐서 정점 v에 이르는 경로의 가중치 합보다
            # 지금까지 찾은 출발점에서 정점 v까지 최단경로가중치까지 더 큰지 비교하는 것
            if not visited[v] and D[min_idx] + val < D[v]:
                D[v] = D[min_idx] + val
                P[v] = min_idx

# heapq 사용 -> 우선탐색큐!
